{
  "hash": "5e7a015ed8dde9a5334fd8e13c253725",
  "result": {
    "markdown": "# R, RStudio, and the tidyverse\n\nStatistics Canada produces a lot of high quality demographic and economic data for Canada. CMHC complements this with housing data, and municipalities across Canada often provide relevant data through their Open Data portals.\n\n## R and RStudio\n\nWe will be working in R and the [RStudio IDE](https://www.rstudio.com/products/rstudio/download/ \"Download RStudio\"), although using a different editor like [Visual Studio Code](https://visualstudio.microsoft.com) works just as well, especially if you are already familiar with it. Within R we will be operating within the [tidyverse framework](https://www.tidyverse.org), a group of R packages that work well together and allow for intuitive operations on data via pipes.\n\nWhile an introduction to R is part of the goal of this book, an we will slowly build up skills as we go, we not give a systematic introduction but rather build up skills slowly as we work on concrete examples. It may be beneficial to supplement this with a [more principled introduction to **R** and the **tidyverse**](https://r4ds.had.co.nz/index.html)**.**\n\n## Packages\n\nPackages are bundled sets of functionality that expand base R. We install or upgrade packages with the `` install.packages` ``. For example, to install the [tidyverse framework](https://www.tidyverse.org) we type\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-1_331325394fd094ae6ba877a4e9ffc930'}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\n```\n:::\n\n\n\ninto the R console. This will install or upgrade the package and required dependencies. To make the functionality, for example the `tibble` function from the **tibble** package that is part of **tidyverse**, available to use we can then either access functions from the package using the `::` namespace selector `tibble::tibble()` or first load the **tibble** or **tidyverse** package via `library(tidyverse)` that makes the `tibble()` function available without having to use the namespace selector.\n\nAdditionally, we will need a number of packages that handle data acquisition and processing for Canadian data.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-2_df4397fd8efd8806ae1ead0a7dfc3aae'}\n\n```{.r .cell-code}\ninstall.packages(c(\"cancensus\",\"cansim\",\"cmhc\",\"tongfen\"))\n```\n:::\n\n\n\n## Basic data manipulation patterns\n\nThere are several basic data manipulation patterns that we will use throughout, and we want to give a quick overview using the Palmer Penguins dataset from the **palmerpenguins** package.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-3_6a8ed93a1e529ada144cf1691bcb3419'}\n\n```{.r .cell-code}\ninstall.packages(\"palmerpenguins\") # install the package if needed\n```\n:::\n\n\n\nWe will at times require additional packages like this to accomplish specialized tasks, installing packages in R is generally a simple and pain-free procedure.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-4_808d1891946fbab6364f6980c4372c43'}\n\n```{.r .cell-code}\n# install.packages(\"palmerpenguins\") # install the package if needed\nlibrary(palmerpenguins)\n```\n:::\n\n\n\nNow we have all the functionality of the **palmerpenguins** package available.\n\n### Exploring the data\n\nWith the **palmerpenguins** package comes the `penguins` dataset, we can expect the first few rows using the `head()` function which displays the first few rows.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-5_ffd683dde857eb24855531654a3aee0b'}\n\n```{.r .cell-code}\nhead(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 8\n  species island    bill_length_mm bill_depth_mm flipper_l~1 body_~2 sex    year\n  <fct>   <fct>              <dbl>         <dbl>       <int>   <int> <fct> <int>\n1 Adelie  Torgersen           39.1          18.7         181    3750 male   2007\n2 Adelie  Torgersen           39.5          17.4         186    3800 fema~  2007\n3 Adelie  Torgersen           40.3          18           195    3250 fema~  2007\n4 Adelie  Torgersen           NA            NA            NA      NA <NA>   2007\n5 Adelie  Torgersen           36.7          19.3         193    3450 fema~  2007\n6 Adelie  Torgersen           39.3          20.6         190    3650 male   2007\n# ... with abbreviated variable names 1: flipper_length_mm, 2: body_mass_g\n```\n:::\n:::\n\n\n\nThe `str()` function offers another convenient way to get an overview over the data.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-6_a89282793cb852ee9661e321f4770052'}\n\n```{.r .cell-code}\nstr(penguins)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntibble [344 x 8] (S3: tbl_df/tbl/data.frame)\n $ species          : Factor w/ 3 levels \"Adelie\",\"Chinstrap\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ island           : Factor w/ 3 levels \"Biscoe\",\"Dream\",..: 3 3 3 3 3 3 3 3 3 3 ...\n $ bill_length_mm   : num [1:344] 39.1 39.5 40.3 NA 36.7 39.3 38.9 39.2 34.1 42 ...\n $ bill_depth_mm    : num [1:344] 18.7 17.4 18 NA 19.3 20.6 17.8 19.6 18.1 20.2 ...\n $ flipper_length_mm: int [1:344] 181 186 195 NA 193 190 181 195 193 190 ...\n $ body_mass_g      : int [1:344] 3750 3800 3250 NA 3450 3650 3625 4675 3475 4250 ...\n $ sex              : Factor w/ 2 levels \"female\",\"male\": 2 1 1 NA 1 2 1 2 NA NA ...\n $ year             : int [1:344] 2007 2007 2007 2007 2007 2007 2007 2007 2007 2007 ...\n```\n:::\n:::\n\n\n\nWe can also type `View(penguins)` into the console to view the dataset in a spreadsheet form.\n\n### Basic data manipulation\n\nTo manipulate and visualize the data we load the tidyverse package.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-7_e6e37243344992e6b94a2a3b56f05153'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\nWe will explore some common data manipulation and visualization workflows.\n\n#### Count groups\n\nTo see how many rows there are for each species we 'pipe' the `penguins` dataset into the `count()` verb. Pipes are how we can stepwise transform data, the pipe operator is given by `%>%` within the **tidyverse** framework and now also available natively in base R via `|>`. These two function (almost) the same way, and we will use both in this book.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-8_1e87681176d346e04edb50ea2d875347'}\n\n```{.r .cell-code}\npenguins |> count(species)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  species       n\n  <fct>     <int>\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n```\n:::\n:::\n\n\n\nThis gives us the count of each species in the dataset, the pipe `|>` inserts the left hand side as the first argument in the `count()` function. We could have equivalently written this without the pipe operator as `count(penguins,species)`.\n\n#### Group and summarize\n\nThe usefulness of the pipe operator becomes clear when we chain several data transformations. If we want to know the mean bill length by species, we group by species and summarize the data.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-9_3e2d9638537036babdc10d4386fcb73f'}\n\n```{.r .cell-code}\npenguins |> \n  group_by(species) |>\n  summarize(bill_length_mm=mean(bill_length_mm, na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 x 2\n  species   bill_length_mm\n  <fct>              <dbl>\n1 Adelie              38.8\n2 Chinstrap           48.8\n3 Gentoo              47.5\n```\n:::\n:::\n\n\n\nHere we explicitly specify how missing values should be treated when summarizing, `na.rm=TRUE` says that NA values should be ignored when computing the mean.\n\n### Visualizing data\n\nWe can visualize the data using `ggplot`. For this we have to specify the mapping aesthetics, we plot the bill length on the x-axis, the depth on the y-axis, colour by species and plot the data as points. The `labs()` function allows us to customize the graph labels.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-10_af13a1eaf79006e31dd9983330e9e75c'}\n\n```{.r .cell-code}\nggplot(penguins,aes(x=bill_length_mm,y=bill_depth_mm,colour=species)) +\n  geom_point() +\n  labs(title=\"Penguin bill length vs depth\",\n       x=\"Bill length  (mm)\",y=\"Bill depth (mm)\",\n       colour=\"Penguin species\",\n       caption=\"Palmer Station Antarctica LTER\")\n```\n\n::: {.cell-output-display}\n![](intro_to_r_files/figure-pdf/unnamed-chunk-10-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n#### Add regression lines\n\nAs an aside we note the Simpson's paradox, in the overall dataset the bill depth declines with length, but if we look separately within each species the bill depth increases with bill length. To make that explicit we can add regression lines using the `geom_smooth` function using `lm` (linear model) as the smoothing method.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-11_7011c9d90617eab5255198799844fc9a'}\n\n```{.r .cell-code}\nggplot(penguins,aes(x=bill_length_mm,y=bill_depth_mm,colour=species)) +\n  geom_point() +\n  geom_smooth(method=\"lm\") +\n  geom_smooth(method=\"lm\", colour=\"black\") +\n  labs(title=\"Penguin bill length vs depth\",\n       x=\"Bill length  (mm)\",y=\"Bill depth (mm)\",\n       colour=\"Penguin species\",\n       caption=\"Palmer Station Antarctica LTER\")\n```\n\n::: {.cell-output-display}\n![](intro_to_r_files/figure-pdf/unnamed-chunk-11-1.png){fig-pos='H'}\n:::\n:::\n\n\n\nThe first `geom_smooth()` function will add a regression line for each species, distinguished by colour in the plot aesthetics. Overriding the `colour` argument in the second `geom_smooth()` function will forget that the data was coloured by species and add the black regression line run on the entire dataset.\n\n### More data manipulations\n\nThere are several common data manipulation steps that we will employ frequently.\n\n#### Filtering rows\n\nOften we are only interested in subsets of the data, we can filter the rows in the dataset by using the `filter` verb from the **dplyr** package that is part of **tidyverse**. For example, if we want to take the previous plot but only show it for penguins on the island of Biscoe we can filter the data accordingly before plotting it.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-12_1ee8c6357f7ffc16b2b2511fac8c2946'}\n\n```{.r .cell-code}\npenguins |>\n  filter(island==\"Biscoe\") |>\nggplot(aes(x=bill_length_mm,y=bill_depth_mm,colour=species)) +\n  geom_point() +\n  geom_smooth(method=\"lm\") +\n  geom_smooth(method=\"lm\", colour=\"black\") +\n  labs(title=\"Penguin bill length vs depth\",\n       subtitle=\"Biscoe island only\",\n       x=\"Bill length  (mm)\",y=\"Bill depth (mm)\",\n       colour=\"Penguin species\",\n       caption=\"Palmer Station Antarctica LTER\")\n```\n\n::: {.cell-output-display}\n![](intro_to_r_files/figure-pdf/unnamed-chunk-12-1.png){fig-pos='H'}\n:::\n:::\n\n\n\n#### Selecting columns\n\nInstead of filtering rows it can be useful to select a subset of the columns to remove columns we don't need and de-clutter the dataset. This is especially useful when producing tables. If we want a table of the numeric data fields of all female Adelie penguins on the island of Biscoe observed in 2007 we can filter by sex and island and select the columns we want.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-13_edabb668bd720f39c1c9802097afafa6'}\n\n```{.r .cell-code}\npenguins |>\n  filter(island==\"Biscoe\", sex==\"female\", species==\"Adelie\", year==2007) |>\n  select(where(is.numeric),-year) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 4\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n           <dbl>         <dbl>             <int>       <int>\n1           37.8          18.3               174        3400\n2           35.9          19.2               189        3800\n3           35.3          18.9               187        3800\n4           40.5          17.9               187        3200\n5           37.9          18.6               172        3150\n```\n:::\n:::\n\n\n\n#### Mutating data\n\nWe often want to change data fields, or compute new columns from existing ones. For example, if we want to convert the body mass from *g* to *kg* we can add a new column using `mutate` for that.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-14_51e8965bbe06dabea24f5d139092aa1d'}\n\n```{.r .cell-code}\npenguin_selection <- penguins |>\n  filter(island==\"Biscoe\", sex==\"female\", species==\"Adelie\", year==2007) |>\n  mutate(body_mass_kg=body_mass_g/1000) |>\n  select(where(is.numeric),-year,-body_mass_g)\n\npenguin_selection\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 4\n  bill_length_mm bill_depth_mm flipper_length_mm body_mass_kg\n           <dbl>         <dbl>             <int>        <dbl>\n1           37.8          18.3               174         3.4 \n2           35.9          19.2               189         3.8 \n3           35.3          18.9               187         3.8 \n4           40.5          17.9               187         3.2 \n5           37.9          18.6               172         3.15\n```\n:::\n:::\n\n\n\n#### Pivoting data\n\nThe data in our `penguin_selection` dataset above is in **wide form**, all the different variables are in their own column. Often it is useful to convert it to **long form**, where we only have one value column with the numeric values and another column specifying the type of measurement. In this case it is useful to add an identification column so that we know which measurements belong to the same penguin. We can just label the penguins by row number.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-15_339feb88c38ba3c999cd34b92002e5a8'}\n\n```{.r .cell-code}\npenguin_selection_long <- penguin_selection |>\n  mutate(ID=row_number()) |>\n  pivot_longer(-ID,names_to=\"Metric\",values_to=\"Value\")\n\npenguin_selection_long |> head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 x 3\n     ID Metric            Value\n  <int> <chr>             <dbl>\n1     1 bill_length_mm     37.8\n2     1 bill_depth_mm      18.3\n3     1 flipper_length_mm 174  \n4     1 body_mass_kg        3.4\n5     2 bill_length_mm     35.9\n6     2 bill_depth_mm      19.2\n```\n:::\n:::\n\n\n\nWe can do the reverse transformation, going **from long** form to **wide form**, using `pivot_wider`.\n\n\n\n::: {.cell hash='intro_to_r_cache/pdf/unnamed-chunk-16_a5ea0d17972679071f44c2110d1bc5a7'}\n\n```{.r .cell-code}\npenguin_selection_long |>\n  pivot_wider(names_from = Metric,values_from = Value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 x 5\n     ID bill_length_mm bill_depth_mm flipper_length_mm body_mass_kg\n  <int>          <dbl>         <dbl>             <dbl>        <dbl>\n1     1           37.8          18.3               174         3.4 \n2     2           35.9          19.2               189         3.8 \n3     3           35.3          18.9               187         3.8 \n4     4           40.5          17.9               187         3.2 \n5     5           37.9          18.6               172         3.15\n```\n:::\n:::\n\n\n\nThis recovers the previous form of the data, with the added `ID` column.\n\n## Canadian data packages\n\nDuring the course of this book we will make heavy use of several R packages to facilitate data access to Canadian data, we will introduce them in this chapter.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}